"""Interface with hashcat"""

import logging
import pkgutil
import subprocess
import sys
import tempfile

log = logging.getLogger(__name__)

NT_RULESET = pkgutil.get_data(__name__, 'toggles-lm-ntlm.rule')


def prepend_usernames(wordlists, hashfile, directory='.'):
    """Extract usernames from hashfile, write to a temporary file, and
    prepend it to list of wordlists
    """
    from hashcathelper.utils import User

    user_file = tempfile.NamedTemporaryFile(
        delete=False, dir=directory, mode='w',
        prefix='userlist_',
    )
    with open(hashfile, 'r') as fp:
        for line in fp.readlines():
            if line.strip():
                u = User(line)
                user_file.write(u.username + '\n')
    user_file.close()
    wordlists.insert(0, user_file.name)


def hashcat(hashcat_bin, hashfile, hashtype, wordlists=[], ruleset=None,
            pwonly=True, directory='.'):
    """
    Run hashcat as a subprocess

    Returns: name of a file containing the stdout of hashcat with ``--show``
    """

    base_command = [
        hashcat_bin,
        hashfile,
        '--username',
        '-m', str(hashtype),
    ]
    command = base_command + ['--outfile-autohex-disable']
    if wordlists:
        prepend_usernames(wordlists, hashfile, directory=directory)
        command = command + ['-a', '0'] + wordlists
        # Attack mode wordlist
        if ruleset:
            command = command + ['-r', ruleset]
    else:
        # Attack mode brute force, all combinations of 7 character passwords
        # (This assumes cracking LM hashes)
        command = command + ['-a', '3', '-i', '?a?a?a?a?a?a?a',
                             '--increment-min', '1', '--increment-max', '7']

    log.debug("Running this command: %s" % command)
    p = subprocess.Popen(
        command,
        stdout=sys.stdout,
        stderr=subprocess.STDOUT,
    )
    p.communicate()
    # Check return code. 0-3 is fine (because user cancelled)
    # https://github.com/hashcat/hashcat/blob/master/docs/status_codes.txt
    if p.returncode not in [0, 1, 2, 3]:
        raise RuntimeError("Hashcat exited with an error")

    # Retrieve result
    output_file = tempfile.NamedTemporaryFile(
        delete=False, dir=directory, mode='w', suffix='_show',
    )
    output_file.close()
    show_command = base_command + ['--show']
    show_command += [
        '--outfile-format', '2',
        '--outfile', output_file.name,
    ]

    p = subprocess.Popen(
        show_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    p.communicate()
    if p.returncode:
        raise RuntimeError(
            "Hashcat exited with non-zero return code when retrieving result"
        )

    if pwonly:
        # Remove user names
        from hashcathelper.utils import User
        output_file_cleaned = tempfile.NamedTemporaryFile(
            delete=False, dir=directory, mode='w', suffix='pwonly',
        )
        with open(output_file.name, 'r',
                  encoding='utf-8', errors='ignore') as fp:
            for line in fp.readlines():
                u = User(line)
                output_file_cleaned.write(u.password + '\n')
        output_file_cleaned.close()
        result = output_file_cleaned.name
    else:
        result = output_file.name
    return result


def crack_pwdump(hashcat_bin, hashfile, directory, wordlist, ruleset,
                 extra_words=[], skip_lm=False):
    """
    Crack the hashes in a pwdump file.

    Files like this are generated by Impacket's secretsdump or Meterpreter's
    pwdump, for example. A line looks like this:

        <USER NAME>:<USER ID>:<LM HASH>:<NT HASH>:::

    First, the LM hashes are cracked in incremental mode. Then, the results
    are used with an NTLM rule set to crack the corresponding NT hashes.
    Last, the results are added to the crackstation wordlist and mangled
    with the OneRule rule set.
    """

    if skip_lm:
        log.info("Skipping LM hashes")
        wordlists = [wordlist]
    else:
        lm_result = hashcat(
            hashcat_bin,
            hashfile,
            hashtype=3000,
            directory=directory,
        )

        # Write ruleset to file in tempdir
        nt_ruleset = tempfile.NamedTemporaryFile(
            'wb',
            dir=directory,
            delete=False,
            prefix='rules_',
        )
        nt_ruleset.write(NT_RULESET)
        nt_ruleset.close()

        nt_result = hashcat(
            hashcat_bin,
            hashfile,
            hashtype=1000,
            ruleset=nt_ruleset.name,
            wordlists=[lm_result],
            directory=directory,
        )
        wordlists = [nt_result, wordlist]

    final_result = hashcat(
        hashcat_bin,
        hashfile,
        hashtype=1000,
        ruleset=ruleset,
        wordlists=wordlists,
        pwonly=False,
        directory=directory,
    )
    return final_result
